<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd">

    <!-- 自动扫描 -->
    <context:component-scan base-package="com.myblog">
        <!-- 扫描时跳过 @Controller 注解的JAVA类（控制器） -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:config.properties" file-encoding="utf-8" ignore-unresolvable="true" />

    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <!-- 可以加多个包 -->
                <value>com.myblog.entity</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
            </props>
        </property>
    </bean>

    <!--配置数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close" p:driverClass="${jdbc.driverClassName}"
          p:jdbcUrl="${jdbc.url}" p:user="${jdbc.username}" p:password="${jdbc.password}"
          p:testConnectionOnCheckout="${jdbc.c3p0.testConnectionOnCheckout}"
          p:testConnectionOnCheckin="${jdbc.c3p0.testConnectionOnCheckin}"
          p:idleConnectionTestPeriod="${jdbc.c3p0.idleConnectionTestPeriod}"
          p:initialPoolSize="${jdbc.c3p0.initialPoolSize}" p:minPoolSize="${jdbc.c3p0.minPoolSize}"
          p:maxPoolSize="${jdbc.c3p0.maxPoolSize}" p:maxIdleTime="${jdbc.c3p0.maxIdleTime}"/>

    <!-- 配置Hibernate事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 配置事务异常封装 -->
    <!--<bean id="persistenceExceptionTranslationPostProcessor"-->
          <!--class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>-->

    <!--&lt;!&ndash; 配合<tx:advice>和<aop:advisor>完成了事务切面的定义 &ndash;&gt;-->
    <!--&lt;!&ndash; 使用强大的切点表达式是语言轻松定义目标方法 &ndash;&gt;-->
    <!--<aop:config proxy-target-class="true">-->
        <!--&lt;!&ndash; 通过aop定义事务增强切面 &ndash;&gt;-->
        <!--<aop:pointcut expression=" execution(* com.myblog.service..*(..))"-->
                      <!--id="serviceMethod" />-->
        <!--&lt;!&ndash; 引用事务增强 &ndash;&gt;-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod" />-->
    <!--</aop:config>-->
    <!--&lt;!&ndash; 事务增强 &ndash;&gt;-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--&lt;!&ndash; 事务属性定义 &ndash;&gt;-->
        <!--<tx:attributes>-->
            <!--<tx:method name="*" />-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

</beans>